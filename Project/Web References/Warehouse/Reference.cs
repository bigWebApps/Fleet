//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5420.
// 
#pragma warning disable 1591

namespace Warehouse {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="UserServiceSoap", Namespace="www.XMLWebServiceSoapHeaderAuth.net")]
    public partial class UserService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetOrganizationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstancesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnectWithKeyReturnOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderDetailsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public UserService() {
            this.Url = global::Properties.Settings.Default.bfp_Warehouse_UserService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetOrganizationsCompletedEventHandler GetOrganizationsCompleted;
        
        /// <remarks/>
        public event GetInstancesCompletedEventHandler GetInstancesCompleted;
        
        /// <remarks/>
        public event ConnectCompletedEventHandler ConnectCompleted;
        
        /// <remarks/>
        public event ConnectWithKeyReturnCompletedEventHandler ConnectWithKeyReturnCompleted;
        
        /// <remarks/>
        public event ReplaceKeyCompletedEventHandler ReplaceKeyCompleted;
        
        /// <remarks/>
        public event GetOrderDetailsCompletedEventHandler GetOrderDetailsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.XMLWebServiceSoapHeaderAuth.net/GetOrganizations", RequestNamespace="www.XMLWebServiceSoapHeaderAuth.net", ResponseNamespace="www.XMLWebServiceSoapHeaderAuth.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetOrganizations(string userName, string password) {
            object[] results = this.Invoke("GetOrganizations", new object[] {
                        userName,
                        password});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationsAsync(string userName, string password) {
            this.GetOrganizationsAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void GetOrganizationsAsync(string userName, string password, object userState) {
            if ((this.GetOrganizationsOperationCompleted == null)) {
                this.GetOrganizationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationsOperationCompleted);
            }
            this.InvokeAsync("GetOrganizations", new object[] {
                        userName,
                        password}, this.GetOrganizationsOperationCompleted, userState);
        }
        
        private void OnGetOrganizationsOperationCompleted(object arg) {
            if ((this.GetOrganizationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationsCompleted(this, new GetOrganizationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.XMLWebServiceSoapHeaderAuth.net/GetInstances", RequestNamespace="www.XMLWebServiceSoapHeaderAuth.net", ResponseNamespace="www.XMLWebServiceSoapHeaderAuth.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetInstances(System.Guid organizationId) {
            object[] results = this.Invoke("GetInstances", new object[] {
                        organizationId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetInstancesAsync(System.Guid organizationId) {
            this.GetInstancesAsync(organizationId, null);
        }
        
        /// <remarks/>
        public void GetInstancesAsync(System.Guid organizationId, object userState) {
            if ((this.GetInstancesOperationCompleted == null)) {
                this.GetInstancesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstancesOperationCompleted);
            }
            this.InvokeAsync("GetInstances", new object[] {
                        organizationId}, this.GetInstancesOperationCompleted, userState);
        }
        
        private void OnGetInstancesOperationCompleted(object arg) {
            if ((this.GetInstancesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstancesCompleted(this, new GetInstancesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.XMLWebServiceSoapHeaderAuth.net/Connect", RequestNamespace="www.XMLWebServiceSoapHeaderAuth.net", ResponseNamespace="www.XMLWebServiceSoapHeaderAuth.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Connect(System.Guid organizationId, System.Guid instanceId, string key) {
            this.Invoke("Connect", new object[] {
                        organizationId,
                        instanceId,
                        key});
        }
        
        /// <remarks/>
        public void ConnectAsync(System.Guid organizationId, System.Guid instanceId, string key) {
            this.ConnectAsync(organizationId, instanceId, key, null);
        }
        
        /// <remarks/>
        public void ConnectAsync(System.Guid organizationId, System.Guid instanceId, string key, object userState) {
            if ((this.ConnectOperationCompleted == null)) {
                this.ConnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectOperationCompleted);
            }
            this.InvokeAsync("Connect", new object[] {
                        organizationId,
                        instanceId,
                        key}, this.ConnectOperationCompleted, userState);
        }
        
        private void OnConnectOperationCompleted(object arg) {
            if ((this.ConnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.XMLWebServiceSoapHeaderAuth.net/ConnectWithKeyReturn", RequestNamespace="www.XMLWebServiceSoapHeaderAuth.net", ResponseNamespace="www.XMLWebServiceSoapHeaderAuth.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid ConnectWithKeyReturn(System.Guid organizationId, System.Guid instanceId, string key) {
            object[] results = this.Invoke("ConnectWithKeyReturn", new object[] {
                        organizationId,
                        instanceId,
                        key});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void ConnectWithKeyReturnAsync(System.Guid organizationId, System.Guid instanceId, string key) {
            this.ConnectWithKeyReturnAsync(organizationId, instanceId, key, null);
        }
        
        /// <remarks/>
        public void ConnectWithKeyReturnAsync(System.Guid organizationId, System.Guid instanceId, string key, object userState) {
            if ((this.ConnectWithKeyReturnOperationCompleted == null)) {
                this.ConnectWithKeyReturnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectWithKeyReturnOperationCompleted);
            }
            this.InvokeAsync("ConnectWithKeyReturn", new object[] {
                        organizationId,
                        instanceId,
                        key}, this.ConnectWithKeyReturnOperationCompleted, userState);
        }
        
        private void OnConnectWithKeyReturnOperationCompleted(object arg) {
            if ((this.ConnectWithKeyReturnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectWithKeyReturnCompleted(this, new ConnectWithKeyReturnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.XMLWebServiceSoapHeaderAuth.net/ReplaceKey", RequestNamespace="www.XMLWebServiceSoapHeaderAuth.net", ResponseNamespace="www.XMLWebServiceSoapHeaderAuth.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReplaceKey(string key, string newKey) {
            this.Invoke("ReplaceKey", new object[] {
                        key,
                        newKey});
        }
        
        /// <remarks/>
        public void ReplaceKeyAsync(string key, string newKey) {
            this.ReplaceKeyAsync(key, newKey, null);
        }
        
        /// <remarks/>
        public void ReplaceKeyAsync(string key, string newKey, object userState) {
            if ((this.ReplaceKeyOperationCompleted == null)) {
                this.ReplaceKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceKeyOperationCompleted);
            }
            this.InvokeAsync("ReplaceKey", new object[] {
                        key,
                        newKey}, this.ReplaceKeyOperationCompleted, userState);
        }
        
        private void OnReplaceKeyOperationCompleted(object arg) {
            if ((this.ReplaceKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceKeyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.XMLWebServiceSoapHeaderAuth.net/GetOrderDetails", RequestNamespace="www.XMLWebServiceSoapHeaderAuth.net", ResponseNamespace="www.XMLWebServiceSoapHeaderAuth.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetOrderDetails(System.Guid orderId, string key) {
            object[] results = this.Invoke("GetOrderDetails", new object[] {
                        orderId,
                        key});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderDetailsAsync(System.Guid orderId, string key) {
            this.GetOrderDetailsAsync(orderId, key, null);
        }
        
        /// <remarks/>
        public void GetOrderDetailsAsync(System.Guid orderId, string key, object userState) {
            if ((this.GetOrderDetailsOperationCompleted == null)) {
                this.GetOrderDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderDetailsOperationCompleted);
            }
            this.InvokeAsync("GetOrderDetails", new object[] {
                        orderId,
                        key}, this.GetOrderDetailsOperationCompleted, userState);
        }
        
        private void OnGetOrderDetailsOperationCompleted(object arg) {
            if ((this.GetOrderDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderDetailsCompleted(this, new GetOrderDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetOrganizationsCompletedEventHandler(object sender, GetOrganizationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetInstancesCompletedEventHandler(object sender, GetInstancesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstancesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstancesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ConnectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ConnectWithKeyReturnCompletedEventHandler(object sender, ConnectWithKeyReturnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectWithKeyReturnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectWithKeyReturnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ReplaceKeyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetOrderDetailsCompletedEventHandler(object sender, GetOrderDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrderDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591